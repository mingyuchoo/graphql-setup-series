enum SortDirection {
  asc
  desc
}

type User {
  email: String!
  id: Int!
  name: String
  posts: [Post!]!
}

input UserUniqueFilterInput {
  id: Int!
}

input UserFilterInput {
  name: String
  email: String
}

input UserSortInput {
  id: SortDirection = desc
}

type Query {
  users(where: UserFilterInput, orderBy: UserSortInput, take: Int, skip: Int): [User]!
  user(where: UserUniqueFilterInput): User
  searchUsers(searchString: String): [User]!
}

type Mutation {
  createUserByEmail(email: String, name: String): User!
  updateUserById(id: Int!, email: String, name: String): User!
  deleteUserById(id: Int!): User
}

type Subscription {
  newUserJoined: User!
}
